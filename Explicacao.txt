Capitulo 1 - Começando com Regex
- Regex, ou expressões regulares, é uma linguagem para encontrar padrões de texto.
- Sendo uma linguagem independente, existem interpretadores para a maioria das plataformas de desenvolvimento, como JavaScript, C#, Python ou Ruby.
- Uma classe de caracteres predefinida é \d, que significa qualquer dígito.
- Existem vários meta-char, como . ou *.
- Existem quantifiers que definem quantas vezes um caractere deve aparecer:
- {1} é um quantifier que significa uma vez.
- * é um quantifier que significa zero, uma ou mais vezes
- . é um meta-char que significa qualquer char.
- Com \ podemos escapar meta-chars, por exemplo \..


Capitulo 2 - Classes de caracteres
- Podemos definir facilmente a classe de qualquer caractere com o [A-Z].
- Conhecemos todos os quantifiers como ?, +, * e {n}.
- \s significa whitespace e é um atalho para [ \t\r\n\f].
- \w significa word char e é uma atalho para [A-Za-z0-9_].

// MetaChar / quantifier



/d --> digito número
	 
. --> especial, encontra qualquer caractere
	 
/. --> escapa o ponto, onde o mesmo só encontra o ponto e não qualquer caractere
	 
{} --> (quantifier) utilizado quando existe a repetição de MetaChar
	 
? --> declara que o caractere em questão é opcional
	 
[] --> classe de caracteres
	 
[0-9] --> classe de caracteres numéricos (do zero até nove)
	 
[a-z] --> classe de caracteres alfabéticos (letra A até Z)
	 
\s - classe predefinida para espaços em branco
	 	
	\t é um tab.
		
	\r é carriage return.
		
	\n é newline.
		
	\f é form feed.
	 
? - zero ou uma vez.
	 
* - zero ou mais vezes.
	 
+ - uma ou mais vezes.
	
{n} - exatamente n vezes.
	 
{n,} - no mínimo n vezes.
	 
{n,m} - no mínimo n vezes, no máximo m vezes.
	 
\w - classe wordchar; atalho para [A-Za-z0-9_]


() - define um grupo
?: - não captura um grupo

Âncoras (marcam uma posição específica no alvo)
	\b - Word boundary; encontrar o início e o fim de uma palavra. Analisa que não devem existir [A-Za-z0-9_] no inicio ou no fim da preposição passada
	\B - Non word boundary; a expressão deve aparecer dentro de uma palavra, nunca no inicio ou no final
	^ - nada pode vir antes 
	$ - nada por vir depois



/* Padrões


CPF (com máscara) --> \d{3}\.\d{3}\.\d{3}\-\d{2}
 
CPF (sem máscara) --> \d{3}\.?\d{3}\.?\d{3}\-?\d{2} ou \d{3}\.{0,1}\d{3}\.{0,1}\d{3}\-{0,1}\d{2} ou \d{3}\.?\d{3}\.?\d{3}[-.]?\d{2} (Nessa situação,
 a separação dos últimos digitos do cpf pode ser por ponto, hifen ou não existir separação)
 
CNPJ --> \d{2}\.\d{3}\.\d{3}\/\d{4}\-\d{2}
 
IP --> \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}
 
CEP --> \d{5}\-\d{3}
 
Telefone --> \(\d{2}\)\ \d{4}\-\d{4} (normal)
 Quando o ddd possui 0 na frente /  quando o número tem 9 na frente --> \(\d{1,3}\)\ \d{1,5}\-\d{4}
 
pesquisar itens que podem ter caracteres opcionais. Exemplo: No <code>for</code> --> <?code>

definir os números entre 1 e 3 E 6 e 9 --> [1-36-9]

data por extenso --> [1-3]?\d\s+de\s[A-Z][a-zç]{1,}\s+de\s+[12]\d{3}

formato para o padrão 19h32min16s --> \d+h\d+min\d+s

placa de carro --> [A-Z]{3}-\d{4}

Notas entre 7.2 e 7.9 e nomes --> 7\.[2-9]\s+-\s+[A-Z][a-z]\w+

([a-z.]{4,14}[a-z\d])@(?:caelum.com.br|alura.com.br) - para email, onde o nome de usuário (antes do @), deve ter no máximo 15 caracteres.
qualquer email - ^([\w-]\.?)+@([\w-]+\.)+([A-Za-z]{2,4})+$

Capitulo 3 - Encontrando a posição certa com âncoras

- Existem âncoras predefinidas que selecionam uma posição dentro do alvo.
- \b é uma âncora que seleciona um word boundary, isso é o início ou fim da palavra.
- ^ é uma âncora que seleciona o início da string alvo.
- $ é uma âncora que seleciona o fim do alvo.

Capitulo 4 - Trabalhando com grupos 

- Declaramos um grupo com ().
- Podemos ter grupos e subgrupos.
- Um grupo é retornado na hora de executar, são úteis para selecionar uma parte do match.
- Através do ?:, dizemos que não queremos ver esse grupo na resposta

